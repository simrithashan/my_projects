# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kUkMt7AaTYRfzAffBThfCQxvCu6Qvicw
"""

from __future__ import print_function  
import numpy 
numpy.random.seed(1337)
import keras
from keras.models import Sequential
from keras.layers import Dense 
from keras.optimizers import SGD
from keras.datasets import mnist
num_classes = 10

batch_size = 128     
epochs = 20
(x_train, y_train), (x_test, y_test) = mnist.load_data()

print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)

x_train = x_train.reshape(60000, 784)  # 28x28 = 784
x_test = x_test.reshape(10000, 784)

x_train = x_train.astype('float32') 
x_test = x_test.astype('float32') 

x_train /= 255  # 0 - 255 ...  0-1 
x_test /= 255   # normalizing your data 


print(x_train.shape[0], 'train samples')
print(x_test.shape[0],  'test samples')

print(x_train.shape)
print(y_train.shape)

y_train[0]

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

y_train[0]

model = Sequential()

model.add( Dense(512, activation='sigmoid', input_shape=(784,)  ) )
model.add( Dense(512, activation='sigmoid'  ) )
model.add( Dense(num_classes, activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy', optimizer=SGD(), 
              metrics=['accuracy'])

history = model.fit( x_train, y_train, 
           batch_size=batch_size,
           epochs=epochs, 
           verbose=1, 
           validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test)

score[1]